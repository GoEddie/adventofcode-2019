import copy

class Point:
    
    def __init__(self, x = 1, y = 1):
        self.x = x
        self.y = y
    
    def move(self, move):

        if move.direction == 'U':
            self.y += move.distance
        
        if move.direction == 'D':
            self.y -= move.distance

        if move.direction == 'R':
            self.x += move.distance
        
        if move.direction == 'L':
            self.y -= move.distance

    def key(self):
        return f"{self.x}::{self.y}"

class Move:
    def __init__(self, direction, distance):
        self.direction = direction
        self.distance = distance

class Parser:
    def __init__(self):
        None

    def parse(self, what):
        direction = what[0:1]
        distance = int(what[1:3])
        return Move(direction, distance)

class Route:
    def __init__(self, initial_point):
        self.route = {}
        self.intersectting_points = []
        self.last_point = copy.copy(initial_point)

    def add_leg(self, destination: Point):

        if destination.x > self.last_point.x:
            for p in range(self.last_point.x + 1, destination.x):
                location = Point(p, self.last_point.y)
                self.add_point(location)
        
        if destination.x < self.last_point.x:
            for p in range(destination.x, self.last_point.x - 1):
                location = Point(p, self.last_point.y)
                self.add_point(location)
        
        
        if destination.y > self.last_point.y:
            for p in range(self.last_point.y + 1, destination.y):
                location = Point(self.last_point.x, p)
                self.add_point(location)
        
        if destination.y < self.last_point.y:
            for p in range(destination.y, self.last_point.y - 1):
                location = Point(self.last_point.x, p)
                self.add_point(location)

        self.last_point = copy.copy(destination)
        

    def add_point(self, point: Point):
        
        if point.key() in self.route:
            self.intersectting_points.append(point)
        else:
            self.route[point.key()] = 0

def map_route(start_point, route_map, moves):
    
    parser = Parser()
    point = Point()
    route_map.last_point = start_point

    for move in moves:
        movement = parser.parse(move)
        print(f" {movement.direction} --> {movement.distance} ")
        point.move(movement)
        route_map.add_leg(point)

    
def distance(from_point, to_point):
    return abs(from_point.x - to_point.x) + abs(from_point.y - to_point.y) 

start_point = Point(1, 1)

route_map = Route(start_point)
map_route(start_point, route_map, "R98,U47,R26,D63,R33,U87,L62,D20,R33,U53,R51".split(','))
map_route(start_point, route_map, "U98,R91,D20,R16,D67,R40,U7,R15,U6,R7".split(','))

closest = 999999

for index, point, in enumerate(route_map.intersectting_points):
    distance_from_base = distance(point, Point(1,1))
    if distance_from_base < closest:
        closest = distance_from_base

print(f"closest intersect is: {closest}")
